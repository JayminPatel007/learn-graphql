type AggregateComment {
    count: Int!
}

type AggregatePost {
    count: Int!
}

type AggregateUser {
    count: Int!
}

type BatchPayload {
    count: Long!
}

type Comment implements Node {
    id: ID!
    text: String!
    post: Post!
    author: User!
}

type CommentConnection {
    pageInfo: PageInfo!
    edges: [CommentEdge]!
    aggregate: AggregateComment!
}

input CommentCreateInput {
    id: ID
    text: String!
    post: PostCreateOneWithoutCommentsInput!
    author: UserCreateOneWithoutCommetsInput!
}

input CommentCreateManyWithoutAuthorInput {
    create: [CommentCreateWithoutAuthorInput!]
    connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutPostInput {
    create: [CommentCreateWithoutPostInput!]
    connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutAuthorInput {
    id: ID
    text: String!
    post: PostCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutPostInput {
    id: ID
    text: String!
    author: UserCreateOneWithoutCommetsInput!
}

type CommentEdge {
    node: Comment!
    cursor: String!
}

enum CommentOrderByInput {
    id_ASC
    id_DESC
    text_ASC
    text_DESC
}

type CommentPreviousValues {
    id: ID!
    text: String!
}

input CommentScalarWhereInput {
    AND: [CommentScalarWhereInput!]
    OR: [CommentScalarWhereInput!]
    NOT: [CommentScalarWhereInput!]
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    text: String
    text_not: String
    text_in: [String!]
    text_not_in: [String!]
    text_lt: String
    text_lte: String
    text_gt: String
    text_gte: String
    text_contains: String
    text_not_contains: String
    text_starts_with: String
    text_not_starts_with: String
    text_ends_with: String
    text_not_ends_with: String
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    node: Comment
    updatedFields: [String!]
    previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
    AND: [CommentSubscriptionWhereInput!]
    OR: [CommentSubscriptionWhereInput!]
    NOT: [CommentSubscriptionWhereInput!]
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: CommentWhereInput
}

input CommentUpdateInput {
    text: String
    post: PostUpdateOneRequiredWithoutCommentsInput
    author: UserUpdateOneRequiredWithoutCommetsInput
}

input CommentUpdateManyDataInput {
    text: String
}

input CommentUpdateManyMutationInput {
    text: String
}

input CommentUpdateManyWithoutAuthorInput {
    create: [CommentCreateWithoutAuthorInput!]
    connect: [CommentWhereUniqueInput!]
    set: [CommentWhereUniqueInput!]
    disconnect: [CommentWhereUniqueInput!]
    delete: [CommentWhereUniqueInput!]
    update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
    updateMany: [CommentUpdateManyWithWhereNestedInput!]
    deleteMany: [CommentScalarWhereInput!]
    upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutPostInput {
    create: [CommentCreateWithoutPostInput!]
    connect: [CommentWhereUniqueInput!]
    set: [CommentWhereUniqueInput!]
    disconnect: [CommentWhereUniqueInput!]
    delete: [CommentWhereUniqueInput!]
    update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
    updateMany: [CommentUpdateManyWithWhereNestedInput!]
    deleteMany: [CommentScalarWhereInput!]
    upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input CommentUpdateManyWithWhereNestedInput {
    where: CommentScalarWhereInput!
    data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutAuthorDataInput {
    text: String
    post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutPostDataInput {
    text: String
    author: UserUpdateOneRequiredWithoutCommetsInput
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
    where: CommentWhereUniqueInput!
    data: CommentUpdateWithoutAuthorDataInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
    where: CommentWhereUniqueInput!
    data: CommentUpdateWithoutPostDataInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
    where: CommentWhereUniqueInput!
    update: CommentUpdateWithoutAuthorDataInput!
    create: CommentCreateWithoutAuthorInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
    where: CommentWhereUniqueInput!
    update: CommentUpdateWithoutPostDataInput!
    create: CommentCreateWithoutPostInput!
}

input CommentWhereInput {
    AND: [CommentWhereInput!]
    OR: [CommentWhereInput!]
    NOT: [CommentWhereInput!]
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    text: String
    text_not: String
    text_in: [String!]
    text_not_in: [String!]
    text_lt: String
    text_lte: String
    text_gt: String
    text_gte: String
    text_contains: String
    text_not_contains: String
    text_starts_with: String
    text_not_starts_with: String
    text_ends_with: String
    text_not_ends_with: String
    post: PostWhereInput
    author: UserWhereInput
}

input CommentWhereUniqueInput {
    id: ID
}

scalar Json

scalar Long

type Mutation {
    createUser(data: UserCreateInput!): User!
    createPost(data: PostCreateInput!): Post!
    createComment(data: CommentCreateInput!): Comment!
    updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
    updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
    updateComment(
        data: CommentUpdateInput!
        where: CommentWhereUniqueInput!
    ): Comment
    deleteUser(where: UserWhereUniqueInput!): User
    deletePost(where: PostWhereUniqueInput!): Post
    deleteComment(where: CommentWhereUniqueInput!): Comment
    upsertUser(
        where: UserWhereUniqueInput!
        create: UserCreateInput!
        update: UserUpdateInput!
    ): User!
    upsertPost(
        where: PostWhereUniqueInput!
        create: PostCreateInput!
        update: PostUpdateInput!
    ): Post!
    upsertComment(
        where: CommentWhereUniqueInput!
        create: CommentCreateInput!
        update: CommentUpdateInput!
    ): Comment!
    updateManyUsers(
        data: UserUpdateManyMutationInput!
        where: UserWhereInput
    ): BatchPayload!
    updateManyPosts(
        data: PostUpdateManyMutationInput!
        where: PostWhereInput
    ): BatchPayload!
    updateManyComments(
        data: CommentUpdateManyMutationInput!
        where: CommentWhereInput
    ): BatchPayload!
    deleteManyUsers(where: UserWhereInput): BatchPayload!
    deleteManyPosts(where: PostWhereInput): BatchPayload!
    deleteManyComments(where: CommentWhereInput): BatchPayload!
    executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

interface Node {
    id: ID!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

type Post implements Node {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments(
        where: CommentWhereInput
        orderBy: CommentOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [Comment!]
}

type PostConnection {
    pageInfo: PageInfo!
    edges: [PostEdge]!
    aggregate: AggregatePost!
}

input PostCreateInput {
    id: ID
    title: String!
    body: String!
    published: Boolean!
    author: UserCreateOneWithoutPostsInput!
    comments: CommentCreateManyWithoutPostInput
}

input PostCreateManyWithoutAuthorInput {
    create: [PostCreateWithoutAuthorInput!]
    connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
    create: PostCreateWithoutCommentsInput
    connect: PostWhereUniqueInput
}

input PostCreateWithoutAuthorInput {
    id: ID
    title: String!
    body: String!
    published: Boolean!
    comments: CommentCreateManyWithoutPostInput
}

input PostCreateWithoutCommentsInput {
    id: ID
    title: String!
    body: String!
    published: Boolean!
    author: UserCreateOneWithoutPostsInput!
}

type PostEdge {
    node: Post!
    cursor: String!
}

enum PostOrderByInput {
    id_ASC
    id_DESC
    title_ASC
    title_DESC
    body_ASC
    body_DESC
    published_ASC
    published_DESC
}

type PostPreviousValues {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
}

input PostScalarWhereInput {
    AND: [PostScalarWhereInput!]
    OR: [PostScalarWhereInput!]
    NOT: [PostScalarWhereInput!]
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    title: String
    title_not: String
    title_in: [String!]
    title_not_in: [String!]
    title_lt: String
    title_lte: String
    title_gt: String
    title_gte: String
    title_contains: String
    title_not_contains: String
    title_starts_with: String
    title_not_starts_with: String
    title_ends_with: String
    title_not_ends_with: String
    body: String
    body_not: String
    body_in: [String!]
    body_not_in: [String!]
    body_lt: String
    body_lte: String
    body_gt: String
    body_gte: String
    body_contains: String
    body_not_contains: String
    body_starts_with: String
    body_not_starts_with: String
    body_ends_with: String
    body_not_ends_with: String
    published: Boolean
    published_not: Boolean
}

type PostSubscriptionPayload {
    mutation: MutationType!
    node: Post
    updatedFields: [String!]
    previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
    AND: [PostSubscriptionWhereInput!]
    OR: [PostSubscriptionWhereInput!]
    NOT: [PostSubscriptionWhereInput!]
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: PostWhereInput
}

input PostUpdateInput {
    title: String
    body: String
    published: Boolean
    author: UserUpdateOneRequiredWithoutPostsInput
    comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateManyDataInput {
    title: String
    body: String
    published: Boolean
}

input PostUpdateManyMutationInput {
    title: String
    body: String
    published: Boolean
}

input PostUpdateManyWithoutAuthorInput {
    create: [PostCreateWithoutAuthorInput!]
    connect: [PostWhereUniqueInput!]
    set: [PostWhereUniqueInput!]
    disconnect: [PostWhereUniqueInput!]
    delete: [PostWhereUniqueInput!]
    update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
    updateMany: [PostUpdateManyWithWhereNestedInput!]
    deleteMany: [PostScalarWhereInput!]
    upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithWhereNestedInput {
    where: PostScalarWhereInput!
    data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
    create: PostCreateWithoutCommentsInput
    connect: PostWhereUniqueInput
    update: PostUpdateWithoutCommentsDataInput
    upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateWithoutAuthorDataInput {
    title: String
    body: String
    published: Boolean
    comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithoutCommentsDataInput {
    title: String
    body: String
    published: Boolean
    author: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
    where: PostWhereUniqueInput!
    data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithoutCommentsInput {
    update: PostUpdateWithoutCommentsDataInput!
    create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
    where: PostWhereUniqueInput!
    update: PostUpdateWithoutAuthorDataInput!
    create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
    AND: [PostWhereInput!]
    OR: [PostWhereInput!]
    NOT: [PostWhereInput!]
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    title: String
    title_not: String
    title_in: [String!]
    title_not_in: [String!]
    title_lt: String
    title_lte: String
    title_gt: String
    title_gte: String
    title_contains: String
    title_not_contains: String
    title_starts_with: String
    title_not_starts_with: String
    title_ends_with: String
    title_not_ends_with: String
    body: String
    body_not: String
    body_in: [String!]
    body_not_in: [String!]
    body_lt: String
    body_lte: String
    body_gt: String
    body_gte: String
    body_contains: String
    body_not_contains: String
    body_starts_with: String
    body_not_starts_with: String
    body_ends_with: String
    body_not_ends_with: String
    published: Boolean
    published_not: Boolean
    author: UserWhereInput
    comments_every: CommentWhereInput
    comments_some: CommentWhereInput
    comments_none: CommentWhereInput
}

input PostWhereUniqueInput {
    id: ID
}

enum PrismaDatabase {
    default
}

type Query {
    users(
        where: UserWhereInput
        orderBy: UserOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [User]!
    posts(
        where: PostWhereInput
        orderBy: PostOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [Post]!
    comments(
        where: CommentWhereInput
        orderBy: CommentOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [Comment]!
    user(where: UserWhereUniqueInput!): User
    post(where: PostWhereUniqueInput!): Post
    comment(where: CommentWhereUniqueInput!): Comment
    usersConnection(
        where: UserWhereInput
        orderBy: UserOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): UserConnection!
    postsConnection(
        where: PostWhereInput
        orderBy: PostOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): PostConnection!
    commentsConnection(
        where: CommentWhereInput
        orderBy: CommentOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): CommentConnection!
    node(id: ID!): Node
}

type Subscription {
    user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
    post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
    comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
}

type User implements Node {
    id: ID!
    name: String!
    email: String!
    posts(
        where: PostWhereInput
        orderBy: PostOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [Post!]
    commets(
        where: CommentWhereInput
        orderBy: CommentOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [Comment!]
}

type UserConnection {
    pageInfo: PageInfo!
    edges: [UserEdge]!
    aggregate: AggregateUser!
}

input UserCreateInput {
    id: ID
    name: String!
    email: String!
    posts: PostCreateManyWithoutAuthorInput
    commets: CommentCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutCommetsInput {
    create: UserCreateWithoutCommetsInput
    connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
    create: UserCreateWithoutPostsInput
    connect: UserWhereUniqueInput
}

input UserCreateWithoutCommetsInput {
    id: ID
    name: String!
    email: String!
    posts: PostCreateManyWithoutAuthorInput
}

input UserCreateWithoutPostsInput {
    id: ID
    name: String!
    email: String!
    commets: CommentCreateManyWithoutAuthorInput
}

type UserEdge {
    node: User!
    cursor: String!
}

enum UserOrderByInput {
    id_ASC
    id_DESC
    name_ASC
    name_DESC
    email_ASC
    email_DESC
}

type UserPreviousValues {
    id: ID!
    name: String!
    email: String!
}

type UserSubscriptionPayload {
    mutation: MutationType!
    node: User
    updatedFields: [String!]
    previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
    AND: [UserSubscriptionWhereInput!]
    OR: [UserSubscriptionWhereInput!]
    NOT: [UserSubscriptionWhereInput!]
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: UserWhereInput
}

input UserUpdateInput {
    name: String
    email: String
    posts: PostUpdateManyWithoutAuthorInput
    commets: CommentUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
    name: String
    email: String
}

input UserUpdateOneRequiredWithoutCommetsInput {
    create: UserCreateWithoutCommetsInput
    connect: UserWhereUniqueInput
    update: UserUpdateWithoutCommetsDataInput
    upsert: UserUpsertWithoutCommetsInput
}

input UserUpdateOneRequiredWithoutPostsInput {
    create: UserCreateWithoutPostsInput
    connect: UserWhereUniqueInput
    update: UserUpdateWithoutPostsDataInput
    upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutCommetsDataInput {
    name: String
    email: String
    posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutPostsDataInput {
    name: String
    email: String
    commets: CommentUpdateManyWithoutAuthorInput
}

input UserUpsertWithoutCommetsInput {
    update: UserUpdateWithoutCommetsDataInput!
    create: UserCreateWithoutCommetsInput!
}

input UserUpsertWithoutPostsInput {
    update: UserUpdateWithoutPostsDataInput!
    create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
    AND: [UserWhereInput!]
    OR: [UserWhereInput!]
    NOT: [UserWhereInput!]
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    name: String
    name_not: String
    name_in: [String!]
    name_not_in: [String!]
    name_lt: String
    name_lte: String
    name_gt: String
    name_gte: String
    name_contains: String
    name_not_contains: String
    name_starts_with: String
    name_not_starts_with: String
    name_ends_with: String
    name_not_ends_with: String
    email: String
    email_not: String
    email_in: [String!]
    email_not_in: [String!]
    email_lt: String
    email_lte: String
    email_gt: String
    email_gte: String
    email_contains: String
    email_not_contains: String
    email_starts_with: String
    email_not_starts_with: String
    email_ends_with: String
    email_not_ends_with: String
    posts_every: PostWhereInput
    posts_some: PostWhereInput
    posts_none: PostWhereInput
    commets_every: CommentWhereInput
    commets_some: CommentWhereInput
    commets_none: CommentWhereInput
}

input UserWhereUniqueInput {
    id: ID
    email: String
}

